import { Injectable } from '@angular/core';
import { Config } from '../config';
import 'rxjs/add/operator/map';
import {AuthProvider} from "../auth/auth";
import {HttpClient} from "@angular/common/http";

@Injectable()
export class OrdersProvider {
  paidOrders = [];
  totalCost = 0;
  constructor(public http: HttpClient, private auth: AuthProvider) {
    console.log('Hello OrdersProvider Provider');
  }

  create(products: Array<Array<any>>, userId, location): Promise<Object> {
    let _products = [];
    products.forEach(p => {
      for(let i = 0; i < p[1]; i++)
        _products.push(p[0]);
    });
	console.log("locaton");
	console.log(location);
	if (location != false) {
		console.log("added location");
		return this.http.post(Config.serverURL + 'api/order', {
		  products: _products,
		  user: userId,
		  location: location
		}).toPromise();
	} else {
		console.log("NOT added location");
		return this.http.post(Config.serverURL + 'api/order', {
		  products: _products,
		  user: userId,
		  location: undefined
		}).toPromise();
	}
  }

  verifyAll() {
    return this.http.get(Config.serverURL + 'api/orders/confirm').toPromise();
  }

  verifyPayment(transactionId) {
    return this.http.get(Config.serverURL + 'api/order/' + transactionId + '/confirm').toPromise();
  }

  receiveOrders(cb = (err = null)=>{}) {
    this.http.get(Config.serverURL + 'api/user/' + this.auth.userID + '/orders').toPromise().then((res:any)=>{
      this.paidOrders = res[0];
      this.totalCost = res[1];
      cb()
    }).catch((err) => {
      console.log(err);
      cb(err);
    });
  }

  ordersLocation(location: string = this.auth.location): Promise<Object> {
    return this.http.get(Config.serverURL + 'api/order/location/' + location).toPromise();
  }

  ordersAdmin(start: number, end: number, location: string = null): Promise<Object> {
    if(location)
      return this.http.get(Config.serverURL + 'api/order/location/' + location + '/' + start + '/' + end).toPromise();
    else
      return this.http.get(Config.serverURL + 'api/order/list/' + start + '/' + end).toPromise();
  }

  sendStatisticsToMail(start: number, end: number, transactions: boolean = false, location: string = null): Promise<Object> {
    if(location)
      return this.http.get(Config.serverURL + 'api/order/location/' + location + '/' + start + '/' + end + '/mail/' + transactions).toPromise();
    else
      return this.http.get(Config.serverURL + 'api/order/list/' + start + '/' + end + '/mail/' + transactions).toPromise();
  }

  clear() {
    this.paidOrders = [];
    this.totalCost = 0;
  }
}
