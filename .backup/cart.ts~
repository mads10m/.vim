import { Component } from '@angular/core';
import {
  AlertController, Events, IonicPage, ModalController, NavController, NavParams,
  ViewController
} from 'ionic-angular';
import {BasePage} from "../BasePage";
import {CartProvider} from "../../providers/cart/cart";
import {ProductsProvider} from "../../providers/products/products";
import {AuthProvider} from "../../providers/auth/auth";
import {OrdersProvider} from "../../providers/orders/orders";
import { Config } from '../../providers/config';
import {LocationsProvider} from "../../providers/locations/locations";
import {LocalNotifications} from "@ionic-native/local-notifications";
import * as moment from 'moment';

declare let cordova: any;

@IonicPage({
  defaultHistory: [
    "HomePage",
    "UserHomepagePage"
  ],
})
@Component({
  selector: 'page-cart',
  templateUrl: 'cart.html',
})

export class CartPage extends BasePage {
  navBarEnabled = true;
  title = "Kurv";
  backgroundToggle = "";
  linkPrefix: string = Config.serverURL;
  currentModal = null;
  pickupStart:string = "";
  pickupEnd:string="";
  todayString:string="";
  currentUser = {};
  sub: boolean;
  subList = [];
  selectedSub = false;
  constructor(public navCtrl: NavController, public navParams: NavParams,
              public products: ProductsProvider, public cart: CartProvider,
              public events: Events, public viewCtrl: ViewController,
              public auth: AuthProvider, public alertCtrl: AlertController,
              public modal: ModalController, public orders: OrdersProvider,
              public locations: LocationsProvider, public localNotifications:LocalNotifications) {
    super();
    if (!this.auth.location) {
      this.goToPage('HomePage');
    }
    this.auth.getUserInfo(this.auth.userID).then(res => {
      this.currentUser = res;
    });
    this.todayString = moment().format("DD/MM/YY");

    locations.show(this.auth.location).then((res: any) => {
      this.pickupStart = res.pickupStart;
      this.pickupEnd = res.pickupEnd;
    });
    if(auth.location) {
      locations.show(auth.location).then((res:any) => {
        var json = res;
		this.sub = json.sub;
		this.subList = json.subList;
      });
    }
  }

  ionViewWillLeave() {
    if(this.currentModal) {
      this.currentModal.dismiss(null);
    }
  }

  ionViewDidLoad() {
    console.log('ionViewDidLoad CartPage');
  }

  imagePathTo135x135(path) {
    if(!path) return "";
    return path.replace("images/","images/135x135_");
  }
  addOne(product) {
    this.cart.add(product[0],1);
  }

  removeOne(product) {
    this.cart.remove(product[0]);
  }
  removeCompletely(product) {
    this.showDialog("Slet","Vil du slette '"+product[0].name + "' fra din kurv?", () => {
      this.cart.remove(product[0],-1);
    });
  }

  pay() {
    if(!this.auth.userID) {
      this.showLoginSignupModal();
    } else if (!this.currentUser['firstName'] || !this.currentUser['lastName']) {
      this.showMessage("Obs!","Du skal indtaste dit navn, før du kan bestille!", ()=>{
        this.openPage("ProfilePage");
      });
	} else {
	  this.orders.create(this.cart.productsInCart, this.auth.userID, this.selectedSub).then((res: any) => {
        cordova.plugins.mobilepay.startPayment(res.totalCost, res.transactionId, result => {
          this.orders.verifyPayment(res.transactionId).then((res)=>{
            this.orders.receiveOrders(()=>{
              this.orderWasSuccessful();
            });
          }).catch((err)=>{
            console.log(err);
          });
        }, err => {
          if(err.errorMessage !== "Cancelled")
            this.showError("Kunne ikke gennemføre betalingen.");
        });
      }).catch(err => {
        if (err.status === 400)
        this.showError(err.error);
        console.log(err);
      });
	}
  }

  orderWasSuccessful() {
    //The order went through
    this.scheduleNotification(this.pickupStart, this.pickupEnd);
    this.cart.clear();
    this.openPage('OrdersPage');
  }

  scheduleNotification(notificationTime, pickupDeadline) {
    let notification_moment = moment(notificationTime,"HH:mm");

    let atTime = notification_moment.toDate();

    //If the order is placed after 'pickupStart', schedule the notification 10 minutes from now
    if (notification_moment.isSameOrBefore(moment()))
      atTime = moment().add(10,"minutes").toDate();

    this.localNotifications.schedule({
      id: 1,
      title: "Din bestilling er klar til dig!",
      text: "Husk at afhente den senest kl. " + pickupDeadline,
      trigger: { at: atTime }
    });
  }

  showLoginSignupModal() {
    let prevLocation = this.auth.location;
    this.showModal('Signin Signup Page', {}, (data) => {
      if (data == 'Log in') {
        this.showModal('Signin Page',{},(data) => {
          if(this.auth.location===prevLocation)
            this.pay();
          else
          {
            this.cart.clear();
            this.openPage('UserHomepagePage');
          }
        });
      } else if (data == 'Sign up') {
        this.showModal('Signup Page',{},(data)=>{
          if(data)
            this.showModal('Signup Confirmation', {mail: data.mail});
        });
      }
    });
  }

  showModal(ModalComponent, data, callback = (data) => {}) {
    this.backgroundToggle = "active";
    let _modal = this.modal.create(ModalComponent, data, {showBackdrop:true, enableBackdropDismiss:true});
    this.currentModal = _modal;
    _modal.onDidDismiss(data => {
      this.backgroundToggle = "";
      callback(data);
    });
    _modal.present();
  }

  doLogin(email, password) {
    this.auth.login({ email: email, password: password }, () => {})
      .then((res: any) => {}, (err) => {
        if (err.status === 401)
          this.showError("Kunne ikke logge ind.");
        else
          this.showError(err);
      });
  }
}
