# vim: foldmethod=marker foldlevel=-1
global !p
texMathZones = ['texMathZone'+x for x in ['A', 'AS', 'B', 'BS', 'C', 'CS', 'D', 'DS', 'E', 'ES', 'F', 'FS', 'G', 'GS', 'H', 'HS', 'I', 'IS', 'J', 'JS', 'K', 'KS', 'L', 'LS', 'DS', 'V', 'W', 'X', 'Y', 'Z']]

texIgnoreMathZones = ['texMathText']

texMathZoneIds = vim.eval('map('+str(texMathZones)+", 'hlID(v:val)')")
texIgnoreMathZoneIds = vim.eval('map('+str(texIgnoreMathZones)+", 'hlID(v:val)')")

ignore = texIgnoreMathZoneIds[0]

def math():
	synstackids = vim.eval("synstack(line('.'), col('.') - (col('.')>=2 ? 1 : 0))")
	try:
		first = next(i for i in reversed(synstackids) if i in texIgnoreMathZoneIds or i in texMathZoneIds)
		return first != ignore
	except StopIteration:
		return False
endglobal

snippet article "New article" bA
\documentclass[12pt]{article}
\begin{document}
$1
\end{document}
endsnippet

snippet beg "\begin{} .. \end{}" bA
\begin{$1}
$2
\end{$1}
endsnippet

snippet fig "\begin{figure} ... \end{figure}" ba
	\begin{figure}[${1:H}]
	\centering
	\includegraphics[width=${2:0.5}\textwidth]{${3}}
	\caption{${4}}
\end{figure}${0}
endsnippet

snippet sec "\section{}" bA
\section{$1} % {{{
$0
% }}}
endsnippet

snippet ssec "\subsection{}" bA
\subsection{$1} % {{{
$0
% }}}
endsnippet

snippet "tab(\d+)\s(\d+)" "Description" r
`!p 
rows = match.group(1)
columns = match.group(2)
snip.rv = """\\begin{tabular}{ l c r }
	1 & 2 & 3 \\\\
	4 & 5 & 6 \\\\
	7 & 8 & 9 \\\\
\end{tabular}"""`
endsnippet

snippet test "Description" b
`!p snip.rv = "test 2" `
endsnippet

snippet eq "\begin{equation} ... \end{equation}" b
\begin{equation}
$1
\end{equation}$0
endsnippet

snippet vec "Description" b
\vec{${1:name}} &= \begin{bmatrix} ${2}\\\\ ${3}\\\\ ${4}\\\\ \end{bmatrix}${5: \\\\[10pt]}${0}
endsnippet

snippet dm "Math" wA
\[
	${1:${VISUAL}}
\] $0
endsnippet

snippet npro "test" bA
\begin{mdframed}
	Problem: ${1:${VISUAL}}
\end{mdframed}${0}
endsnippet

snippet box "Box"
`!p snip.rv = '┌' + '─' * (len(t[1]) + 2) + '┐'`
│ $1 │
`!p snip.rv = '└' + '─' * (len(t[1]) + 2) + '┘'`
$0
endsnippet

context "math()"
snippet jeje "Description" A
helo
endsnippet

snippet tt "Description" b
${1:placeholder} - ${2:placeholder}
`!p
snip.rv="""
{0}
{1}
{2}
{3}
{4}
{5}
{6}
""".format(
	fn,
	snip.fn,
	snip.ft,
	snip.basename,
	t[1] + " - " + t[2],
	snip.v,
	snip
)
`
endsnippet
